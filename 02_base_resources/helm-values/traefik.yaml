image:
  # tag: "3.1.1"
  pullPolicy: Always

certResolvers:
  letsencrypt:
    dnsChallenge:
      provider: cloudflare
    storage: /data/acme.json
env:
  - name: CF_DNS_API_TOKEN
    valueFrom:
      secretKeyRef:
        name: ${cloudflare_api_token}
        key: token

ports:
  internet:
    ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
    # asDefault: true
    port: 8444
    expose:
      default: true
    exposedPort: 6443
    protocol: TCP
    http3:
      enabled: true
    tls:
      enabled: true
      options: ""
      certResolver: "letsencrypt"
      domains:
        - main: "*.${domain}"
    middlewares: []
    forwardedHeaders:
      insecure: true
  websecure:
    port: 8443
    expose:
      default: true
    exposedPort: 443
    http3:
      enabled: true
    tls:
      enabled: true
      options: ""
      certResolver: "letsencrypt"
      domains:
        - main: "*.local.${domain}"
    middlewares: []
    forwardedHeaders:
      insecure: true
  postgresql:
    port: 5432
    expose:
      default: true
    exposedPort: 5432
    tls:
      enabled: false
      options:
        default:
          sniStrict: true
    forwardedHeaders:
      insecure: true

service:
  enabled: true
  ## -- Single service is using `MixedProtocolLBService` feature gate.
  ## -- When set to false, it will create two Service, one for TCP and one for UDP.
  single: true
  spec:
    externalTrafficPolicy: Local
  # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
  annotations: {
    metallb.universe.tf/address-pool: traefik-ip-pool
  }

persistence:
  enabled: true
  storageClass: nfs-csi-traefik

ingressRoute:
  dashboard:
    # -- Create an IngressRoute for the dashboard
    enabled: true
    # -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
    annotations: {}
    # -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
    labels: {}
    # -- The router match rule used for the dashboard ingressRoute
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    # -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
    # By default, it's using traefik entrypoint, which is not exposed.
    # /!\ Do not expose your dashboard without any protection over the internet /!\
    entryPoints: ["web"]
    # -- Additional ingressRoute middlewares (e.g. for authentication)
    middlewares: []

podSecurityContext:
  # /!\ When setting fsGroup, Kubernetes will recursively change ownership and
  # permissions for the contents of each volume to match the fsGroup. This can
  # be an issue when storing sensitive content like TLS Certificates /!\
  fsGroup: 65532

deployment:
 initContainers:
    - name: volume-permissions
      image: busybox:latest
      command:
        [
          "sh",
          "-c",
          "touch /data/acme.json; chown 65532 /data/acme.json; chmod -v 600 /data/acme.json",
        ]
      securityContext:
        runAsNonRoot: false
        runAsGroup: 0
        runAsUser: 0
      volumeMounts:
        - name: data
          mountPath: /data

providers:
  kubernetesIngress:
    enabled: true
    publishedService:
      enabled: true
      # Published Kubernetes Service to copy status from. Format: namespace/servicename
      # By default this Traefik service
      # pathOverride: ""
  kubernetesCRD:
    # -- Load Kubernetes IngressRoute provider
    enabled: true
    # -- Allows IngressRoute to reference resources in namespace other than theirs
    allowCrossNamespace: true

logs:
  general:
    # -- By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    # format: json
    # By default, the level is set to ERROR.
    # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: INFO
    format: json
  access:
    # -- To enable access logs
    enabled: true
    format: json