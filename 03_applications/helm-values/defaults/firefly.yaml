firefly-db:
  # if you set this to false it will not be installed
  enabled: false

firefly-iii:
  # -- Set to false to not deploy Firefly III
  enabled: true
  replicaCount: 1

  image:
    repository: "fireflyiii/core"
    pullPolicy: IfNotPresent
    tag: version-6.1.1

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  persistence:
    # -- If you set this to false, uploaded attachments are not stored persistently and will be lost with every restart of the pod
    enabled: true
    storageClassName: ""
    accessModes: ReadWriteOnce
    storage: 1Gi
    # -- If you want to use an existing claim, set it here
    existingClaim: ""

  # -- Environment variables for Firefly III. See docs at: https://github.com/firefly-iii/firefly-iii/blob/main/.env.example
  config:
    # -- Set this to the name of a secret to load environment variables from. If defined, values in the secret will override values in config.env
    existingSecret: ""

    # -- Set environment variables from configMaps or Secrets
    envValueFrom: {}

    # -- Directly defined environment variables. Use this for non-secret configuration values.
    env:
      DB_HOST: "firefly-db"
      # DB_CONNECTION: pgsql
      # DB_PORT: "5432"
      # DB_DATABASE: firefly
      # DB_USERNAME: firefly
      DEFAULT_LANGUAGE: "en_US"
      DEFAULT_LOCALE: "equal"
      TZ: "Europe/Amsterdam"
      TRUSTED_PROXIES: "**"

  # -- Create a new Secret from values file to store sensitive environment variables. Make sure to keep your secrets encrypted in the repository! For example, you can use the 'helm secrets' plugin (https://github.com/jkroepke/helm-secrets) to encrypt and manage secrets. If the 'config.existingSecret' value is set, a new Secret will not be created.
  secrets:
    env:
      APP_PASSWORD: "CHANGE_ENCRYPT_ME"
      DB_PASSWORD: "CHANGE_ENCRYPT_ME"

  # -- A cronjob for [recurring Firefly III tasks](https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/).
  cronjob:
    # -- Set to true to enable the CronJob. Note that you need to specify either cronjob.auth.existingSecret or cronjob.auth.token for it to actually be deployed.
    enabled: false

    # -- Authorization for the CronJob. See https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/#request-a-page-over-the-web
    auth:
      # -- The name of a secret containing a data.token field with the cronjob token
      existingSecret: ""

      # -- The name of the key in the existing secret to get the cronjob token from
      secretKey: "token"

      # -- The token in plain text
      token: ""

    # -- Annotations for the CronJob
    annotations: {}

    # -- When to run the CronJob. Defaults to 03:00 as this is when Firefly III executes regular tasks.
    schedule: "0 3 * * *"

    # -- How many pods to keep around for successful jobs
    successfulJobsHistoryLimit: 3

    # -- How many pods to keep around for failed jobs
    failedJobsHistoryLimit: 1

    # -- How to treat failed jobs
    restartPolicy: OnFailure

    image:
      repository: curlimages/curl
      pullPolicy: IfNotPresent
      tag: 7.81.0

    imagePullSecrets: []

    podAnnotations: {}

    securityContext: {}

    podSecurityContext: {}

    resources: {}

    nodeSelector: {}

    tolerations: []

    affinity: {}

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Here, you can specify custom volumes to use.
  extraVolumes: []
    # - name: db-tls-firefly
    #   secret:
    #     secretName: db-tls-firefly
    #     defaultMode: 0440

  # And here, your custom volume mounts.
  extraVolumeMounts: []
    # - name: db-tls-firefly
    #   mountPath: /db-cert
    #   readOnly: true

importer:
  # -- Set to false to not deploy the importer
  enabled: true
  replicaCount: 1

  # -- The proxies that are trusted by the importer
  trustedProxies: "**"

  fireflyiii:
    # -- The URL at which Firefly III is available. If you change this value, click the "Reauthenticate" button on the importer after opening it!
    url: "http://firefly-firefly-iii:80"

    # -- The URL at which you access Firefly III. Check https://docs.firefly-iii.org/data-importer/install/configure/#configure-fidi to find out if you should set this.
    vanityUrl: ""

    auth:
      # -- If you specify an existingSecret, it has to have the accessToken in a .spec.data.accessToken
      existingSecret: ""

      # -- The access token in plain text
      accessToken: ""

  # -- Environment variables for the importer. See docs at: https://github.com/firefly-iii/data-importer/blob/main/.env.example
  config:
    # -- Set this to the name of a secret to load environment variables from. If defined, values in the secret will override values in config.env
    existingSecret: ""

    # -- Set environment variables from configMaps or Secrets
    envValueFrom: {}

    # -- Directly defined environment variables. Use this for non-secret configuration values.
    env:
      IGNORE_DUPLICATE_ERRORS: "false"
      TZ: "Europe/Amsterdam"

    # -- A list of files with a mountPath, a file name and the file's content. Files are stored as a secret.
    files:
      - mountPath: /var/www/html/storage/configurations
        name: test.txt
        content: |
          This is a test file with some content

  # -- Configure additional mounts for the pod. Value is a list of VolumeMount specs, see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#volumemount-v1-core
  additionalVolumeMounts: []

  # -- Configure additional volumes for the Pod. Value is a list of Volume specs, see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#volume-v1-core
  additionalVolumes: []

  image:
    repository: fireflyiii/data-importer
    pullPolicy: IfNotPresent
    tag: "version-0.8.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}